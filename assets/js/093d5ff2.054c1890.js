"use strict";(self.webpackChunkkmm_icerock_dev=self.webpackChunkkmm_icerock_dev||[]).push([[1906],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return v}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),v=o,d=m["".concat(s,".").concat(v)]||m[v]||u[v]||i;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8590:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return v},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(83117),o=t(80102),i=(t(67294),t(3905)),a=["components"],l={},s="Kotlin/Native custom options",c={unversionedId:"kotlin-native/advanced/kotlin-native-options",id:"kotlin-native/advanced/kotlin-native-options",title:"Kotlin/Native custom options",description:"Set iOS minimal deployment version",source:"@site/learning/kotlin-native/advanced/kotlin-native-options.md",sourceDirName:"kotlin-native/advanced",slug:"/kotlin-native/advanced/kotlin-native-options",permalink:"/learning/kotlin-native/advanced/kotlin-native-options",draft:!1,editUrl:"https://github.com/icerockdev/kmm.icerock.dev/tree/docusaurus/learning/kotlin-native/advanced/kotlin-native-options.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kotlin/Native \u0438 LLVM",permalink:"/learning/kotlin-native/advanced/kotlin-native-llvm"},next:{title:"Kotlin/Native properties",permalink:"/learning/kotlin-native/advanced/kotlin-native-props"}},p={},u=[{value:"Set iOS minimal deployment version",id:"set-ios-minimal-deployment-version",level:2},{value:"Debug linking issues",id:"debug-linking-issues",level:2},{value:"Verbose logs for compiler",id:"verbose-logs-for-compiler",level:2}],m={toc:u};function v(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"kotlinnative-custom-options"},"Kotlin/Native custom options"),(0,i.kt)("h2",{id:"set-ios-minimal-deployment-version"},"Set iOS minimal deployment version"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},'compilations.all {\n    kotlinOptions.freeCompilerArgs += "-Xoverride-konan-properties=osVersionMin.ios_x64=13.0;osVersionMin.ios_arm64=13.0"\n}\n')),(0,i.kt)("h2",{id:"debug-linking-issues"},"Debug linking issues"),(0,i.kt)("p",null,"build.gradle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},'cocoapods { \n    framework {\n         freeCompilerArgs += "-Xverbose-phases=Linker"\n    }\n }\n')),(0,i.kt)("p",null,"gradle.properties"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"kotlin.internal.compiler.arguments.log.level=info\n")),(0,i.kt)("p",null,"gradle run should be with ",(0,i.kt)("inlineCode",{parentName:"p"},"--info")," option"),(0,i.kt)("h2",{id:"verbose-logs-for-compiler"},"Verbose logs for compiler"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},'compilations.all {\n    kotlinOptions.freeCompilerArgs += "-verbose"\n}\n')))}v.isMDXComponent=!0}}]);